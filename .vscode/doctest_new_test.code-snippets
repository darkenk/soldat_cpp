{
	// Place your soldat_cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New test fixture": {
		"scope": "cpp",
		"prefix": "test_fixture",
		"body": [
			"#pragma region tests",
			"#include <doctest.h>",
			"",
			"namespace",
			"{",
			"",
			"class ${TM_FILENAME_BASE}Fixture",
			"{",
			"public:",
			"  ${TM_FILENAME_BASE}Fixture() = default;",
			"  ~${TM_FILENAME_BASE}Fixture() = default;",
			"  ${TM_FILENAME_BASE}Fixture(const ${TM_FILENAME_BASE}Fixture&) = delete;",
			"protected:",
			"};",
			"",
			"TEST_SUITE(\"${TM_FILENAME_BASE}Suite\")",
			"{",
			"",
			"TEST_CASE_FIXTURE(${TM_FILENAME_BASE}Fixture, \"Sample test\")",
			"{",
			"  CHECK(false);",
			"}",
			"",
			"} // end of ${TM_FILENAME_BASE}Suite",
			"} // end of unnamed namespace", 
			"#pragma endregion tests"
		],
		"description": "New test fixture"
	}
}