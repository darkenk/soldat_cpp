cmake_minimum_required(VERSION 3.20)
project(soldat_third_party_dependencies)
include(ExternalProject)

function(create_import_cmake_file)
  # Parse the arguments
  set(options "")
  set(oneValueArgs "")
  set(multiValueArgs PROJECTS)
  cmake_parse_arguments(ARG "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  # Validate input
  if(NOT ARG_PROJECTS)
    message(FATAL_ERROR "PROJECTS parameter is required")
  endif()

  set(THIRD_PARTY_CMAKE ${CMAKE_BINARY_DIR}/install/third_party.cmake)
  file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/install)
  file(WRITE ${THIRD_PARTY_CMAKE} "# Autogenerated file, do not edit\n")

  # Process each project in the list
  foreach(proj ${ARG_PROJECTS})
    ExternalProject_Get_Property(${proj} INSTALL_DIR)
    file(APPEND ${THIRD_PARTY_CMAKE}
      "list(APPEND CMAKE_PREFIX_PATH ${INSTALL_DIR})\n"
    )
  endforeach()
endfunction()

ExternalProject_Add(
  SDL3
  PREFIX "${CMAKE_BINARY_DIR}/third_party/SDL3"
  INSTALL_DIR "${CMAKE_CURRENT_BINARY_DIR}/install/SDL3"
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/SDL"
  CMAKE_ARGS
    -DSDL_LIBURING=OFF
    -DSDL_INSTALL=ON
    -DSDL_UNINSTALL=OFF
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
  UPDATE_COMMAND ""   # Not doing updates
  PATCH_COMMAND ""    # No patches
  USES_TERMINAL_CONFIGURE ON
  USES_TERMINAL_BUILD ON
  USES_TERMINAL_INSTALL ON
)

ExternalProject_Get_Property(SDL3 INSTALL_DIR)
set(sdl3_install_dir ${INSTALL_DIR})

ExternalProject_Add(
  SDL_shadercross DEPENDS SDL3
  PREFIX "${CMAKE_BINARY_DIR}/third_party/SDL_shadercross"
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/SDL_shadercross"
  INSTALL_DIR "${CMAKE_CURRENT_BINARY_DIR}/install/SDL_shadercross"
  CMAKE_ARGS
    -DCMAKE_PREFIX_PATH=${sdl3_install_dir}
    -DSDLSHADERCROSS_DXC=ON
    -DSDLSHADERCROSS_VENDORED=ON
    -DHLSL_COPY_GENERATED_SOURCES=ON
    -DSDLSHADERCROSS_INSTALL=ON
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
  UPDATE_COMMAND ""   # Not doing updates
  PATCH_COMMAND ""    # No patches
  USES_TERMINAL_CONFIGURE ON
  USES_TERMINAL_BUILD ON
  USES_TERMINAL_INSTALL ON
)

ExternalProject_Add(
  protobuf-external
  PREFIX "${CMAKE_BINARY_DIR}/third_party/protobuf"
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/protobuf-3.19.1
  INSTALL_DIR "${CMAKE_CURRENT_BINARY_DIR}/install/protobuf"
  CMAKE_ARGS
    #"-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}"
    -Dprotobuf_BUILD_TESTS:BOOL=OFF
    -Dprotobuf_BUILD_EXAMPLES:BOOL=OFF
    -DBUILD_SHARED_LIBS:BOOL=OFF
    -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    # other project specific parameters
  SOURCE_SUBDIR cmake
  USES_TERMINAL_CONFIGURE ON
  USES_TERMINAL_BUILD ON
  USES_TERMINAL_INSTALL ON
)

ExternalProject_Add(
    libressl
    PREFIX "${CMAKE_BINARY_DIR}/third_party/libressl"
    INSTALL_DIR "${CMAKE_BINARY_DIR}/install/libressl"
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/libressl-3.4.3"
    CMAKE_ARGS
        -DLIBRESSL_APPS=OFF
        -DLIBRESSL_TESTS=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    USES_TERMINAL_CONFIGURE ON
    USES_TERMINAL_BUILD ON
    USES_TERMINAL_INSTALL ON
)

ExternalProject_Get_Property(libressl INSTALL_DIR)
set(libressl_install_dir ${INSTALL_DIR})
ExternalProject_Get_Property(protobuf-external INSTALL_DIR)
set(protobuf_install_dir ${INSTALL_DIR})
set(protobuf_protoc_path ${protobuf_install_dir}/bin/protoc)

ExternalProject_Add(
    GameNetworkingSockets DEPENDS libressl protobuf-external
    PREFIX "${CMAKE_BINARY_DIR}/third_party/GameNetworkingSockets"
    INSTALL_DIR "${CMAKE_BINARY_DIR}/install/GameNetworkingSockets"
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/GameNetworkingSockets-1.3.0"
    LIST_SEPARATOR |
    CMAKE_ARGS
        -DUSE_CRYPTO=LibreSSL
        -DUSE_CRYPTO25519=Reference
        "-DCMAKE_PREFIX_PATH=${libressl_install_dir}|${protobuf_install_dir}"
        -Dprotobuf_BUILD_TESTS=OFF
        -Dprotobuf_BUILD_SHARED_LIBS=OFF
        -Dprotobuf_USE_STATIC_LIBS=ON
        -DLIGHT_TESTS=OFF
        -DGAMENETWORKINGSOCKETS_BUILD_EXAMPLES=OFF
        -DGAMENETWORKINGSOCKETS_BUILD_TESTS=OFF
        -DProtobuf_PROTOC_EXECUTABLE=${protobuf_protoc_path}
        "-DCMAKE_FIND_ROOT_PATH=${libressl_install_dir}|${protobuf_install_dir}"
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    USES_TERMINAL_CONFIGURE ON
    USES_TERMINAL_BUILD ON
    USES_TERMINAL_INSTALL ON
)

ExternalProject_Add(
    spdlog
    PREFIX "${CMAKE_BINARY_DIR}/third_party/spdlog"
    INSTALL_DIR "${CMAKE_BINARY_DIR}/install/spdlog"
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/spdlog-1.9.2"
    CMAKE_ARGS
        -DSPDLOG_BUILD_TESTS=OFF
        -DSPDLOG_BUILD_BENCH=OFF
        -DSPDLOG_FMT_EXTERNAL=OFF
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    USES_TERMINAL_CONFIGURE ON
    USES_TERMINAL_BUILD ON
    USES_TERMINAL_INSTALL ON
)

ExternalProject_Add(
    physfs
    PREFIX "${CMAKE_BINARY_DIR}/third_party/physfs"
    INSTALL_DIR "${CMAKE_BINARY_DIR}/install/physfs"
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/physfs-3.0.2"
    CMAKE_ARGS
        -DPHYSFS_BUILD_SHARED=OFF
        -DPHYSFS_BUILD_TEST=OFF
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    USES_TERMINAL_CONFIGURE ON
    USES_TERMINAL_BUILD ON
    USES_TERMINAL_INSTALL ON
)

ExternalProject_Add(
    freetype
    PREFIX "${CMAKE_BINARY_DIR}/third_party/freetype"
    INSTALL_DIR "${CMAKE_BINARY_DIR}/install/freetype"
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/freetype-2.10.4"
    CMAKE_ARGS
        -DDISABLE_PNG=ON
        -DDISABLE_HARFBUZ=ON
        -DDISABLE_ZLIB=ON
        -DCMAKE_DISABLE_FIND_PACKAGE_BZip2=True
        -DCMAKE_DISABLE_FIND_PACKAGE_BrotliDec=True
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    USES_TERMINAL_CONFIGURE ON
    USES_TERMINAL_BUILD ON
    USES_TERMINAL_INSTALL ON
)

ExternalProject_Add(
    dbg_macro
    PREFIX "${CMAKE_BINARY_DIR}/third_party/dbg-macro"
    INSTALL_DIR "${CMAKE_BINARY_DIR}/install/dbg-macro"
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/dbg-macro"
    CMAKE_ARGS
        -DCMAKE_CXX_STANDARD=20
        -DDBG_MACRO_ENABLE_TESTS=OFF
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    USES_TERMINAL_CONFIGURE ON
    USES_TERMINAL_BUILD ON
    USES_TERMINAL_INSTALL ON
)

ExternalProject_Add(
    approval_tests
    PREFIX "${CMAKE_BINARY_DIR}/third_party/ApprovalTests"
    INSTALL_DIR "${CMAKE_BINARY_DIR}/install/ApprovalTests"
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/ApprovalTests.cpp"
    CMAKE_ARGS
        -DAPPROVAL_TESTS_BUILD_TESTING=OFF
        -DAPPROVAL_TESTS_BUILD_EXAMPLES=OFF
        -DAPPROVAL_TESTS_BUILD_DOCS=OFF
        -DAPPROVAL_TESTS_BUILD_THIRD_PARTY_CATCH2=OFF
        -DAPPROVAL_TESTS_BUILD_THIRD_PARTY_DOCTEST=OFF
        -DAPPROVAL_TESTS_BUILD_THIRD_PARTY_UT=OFF
        -DAPPROVAL_TESTS_ENABLE_BOOST_TEST_INTEGRATION=OFF
        -DAPPROVAL_TESTS_ENABLE_CATCH2_INTEGRATION=OFF
        -DAPPROVAL_TESTS_ENABLE_CATCH2V3_INTEGRATION=OFF
        -DAPPROVAL_TESTS_ENABLE_CPPUTEST_INTEGRATION=OFF
        -DAPPROVAL_TESTS_ENABLE_GOOGLETEST_INTEGRATION=OFF
        -DAPPROVAL_TESTS_ENABLE_UT_INTEGRATION=OFF
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    USES_TERMINAL_CONFIGURE ON
    USES_TERMINAL_BUILD ON
    USES_TERMINAL_INSTALL ON
)

ExternalProject_Add(
    soloud DEPENDS SDL3
    PREFIX "${CMAKE_BINARY_DIR}/third_party/soloud"
    INSTALL_DIR "${CMAKE_BINARY_DIR}/install/soloud"
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/soloud"
    CMAKE_ARGS
        -DCMAKE_PREFIX_PATH=${sdl3_install_dir}
        -DSDL3_ROOT=${sdl3_install_dir}
        -DSOLOUD_AUTO_DETECT_BACKENDS=OFF
        -DSOLOUD_ENABLE_BACKEND_SDL3=ON
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    USES_TERMINAL_CONFIGURE ON
    USES_TERMINAL_BUILD ON
    USES_TERMINAL_INSTALL ON
)

create_import_cmake_file(PROJECTS
    SDL3
    SDL_shadercross
    protobuf-external
    libressl
    GameNetworkingSockets
    spdlog
    physfs
    freetype
    dbg_macro
    soloud
)

# tools
ExternalProject_Add(
  iwyu
  PREFIX "${CMAKE_BINARY_DIR}/third_party/iwyu"
  INSTALL_DIR "${CMAKE_BINARY_DIR}/install/iwyu"
  GIT_REPOSITORY "https://github.com/include-what-you-use/include-what-you-use.git"
  GIT_TAG "clang_20"
  CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
    -DCMAKE_BUILD_TYPE=Release
  USES_TERMINAL_CONFIGURE ON
  USES_TERMINAL_BUILD ON
  USES_TERMINAL_INSTALL ON
)
# end tools